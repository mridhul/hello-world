# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker:
          version: 17.11.0-ce
          docker_layer_caching: true

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python manage.py test
      #- run:
      #    name: Build Image
      #    command: |
      #      echo q1w2e3 | docker login -u mridhulimpress --password-stdin https://hub.docker.com
      #      docker build -t testimg:latest .
      #      docker tag testimg:latest hub.docker.com/testimg:latest
      #      docker push hub.docker.com/testimg:latest
      #      docker images
      - run:
          name: Check for docker vulnerabilities
          command: |
            docker run -p 5432:5432 -d --name db arminc/clair-db:latest
            docker run -p 6060:6060 --link db:postgres -d --name clair arminc/clair-local-scan:v2.0.1
            mkdir ~/repo/reports
            docker run -v /var/run/docker.sock:/var/run/docker.sock -d --name clair-scanner cplee/clair-scanner:latest tail -f /dev/null
            clair_ip=`docker exec -it clair hostname -i | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'`
            scanner_ip=`docker exec -it clair-scanner hostname -i | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'`
            img=ubuntu:latest
            echo "img = $img"
            echo "clair_ip = $clair_ip"
            echo "scanner_ip = $scanner_ip"
            docker pull $img
            docker cp .circleci/whitelist.yml clair-scanner:/whitelist.yml 
            DATE=`date '+%Y-%m-%d-%H-%M-%S'`
            reportFile=container-scanning-report-$DATE.json
            docker exec -it clair-scanner clair-scanner -r /tmp/$reportFile --ip ${scanner_ip} --clair=http://${clair_ip}:6060 -t High -w /whitelist.yml  $img
            docker cp clair-scanner:/tmp/$reportFile ~/repo/reports
            ls -al ~/repo/reports
            pip install slackclient
            python .circleci/tools/slack.py

      - store_artifacts:
          path: ~/repo/reports
     
 
